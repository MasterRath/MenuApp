import tkinter as tk
from tkinter import messagebox
import subprocess
from PIL import Image, ImageTk

class ProjectLauncher(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Xander's Projects")
        self.geometry("1200x800")  # Set a larger initial size for the main window
        self.configure(bg="#e68632")  # Set the background color of the main window

        # Set grid configuration
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(0, weight=1)

        # List of projects with descriptions and screenshot paths
        self.projects = [
            ("Chatty", "/Users/xander/Desktop/Menu/Chatty/chatty.py", "A chat application.", "/Users/xander/Desktop/Menu/Screenshots/chatty_screenshot.png"),
            ("Open AI Image Generation", "/Users/xander/Desktop/Menu/Open_AI_Image_Generation/main.py", "Generate images using OpenAI.", "/Users/xander/Desktop/Menu/Screenshots/openai_screenshot.png"),
            ("Snake Game", "/Users/xander/Desktop/Menu/SnakeGame/Snake.py", "Classic snake game.", "/Users/xander/Desktop/Menu/Screenshots/snake_screenshot.png"),
            ("Weather App", "/Users/xander/Desktop/Menu/Weather_App/weatherApp_GUI.py", "Check the weather.", "/Users/xander/Desktop/Menu/Screenshots/weather_screenshot.png"),
            ("Object Detection", "/Users/xander/Desktop/Menu/Object_Detection/vision.py", "Detect objects in images.", "/Users/xander/Desktop/Menu/Screenshots/object_detection_screenshot.png")
        ]

        # Create a frame for the buttons and description
        self.main_frame = tk.Frame(self, bg="#e68632")
        self.main_frame.grid(row=0, column=0, sticky="nsew")

        # Create a label to show the description
        self.description_label = tk.Label(self.main_frame, text="", wraplength=600, bg="#e68632", font=("Helvetica", 14))  # Larger font size and wraplength
        self.description_label.pack(pady=20)

        # Create a label to show the image
        self.image_label = tk.Label(self.main_frame, bg="#e68632")
        self.image_label.pack(pady=20)

        # Create a frame for the buttons
        self.button_frame = tk.Frame(self.main_frame, bg="#e68632")
        self.button_frame.pack(fill="both", expand=True, pady=20, padx=20)

        # Create buttons for each project and bind hover events to update the description and image
        for name, path, description, image_path in self.projects:
            button = tk.Button(self.button_frame, text=name, command=lambda p=path: self.open_project(p), font=("Helvetica", 16))
            button.pack(fill=tk.X, padx=10, pady=10)
            button.bind("<Enter>", lambda e, desc=description, img_path=image_path: self.update_description(e, desc, img_path))
            button.bind("<Leave>", self.clear_description)
            button.bind("<Motion>", lambda e, img_path=image_path: self.schedule_preview(e, img_path))
            button.bind("<Leave>", self.schedule_hide_preview)

        # Allow the buttons to resize with the window
        for i in range(len(self.projects)):
            self.button_frame.grid_rowconfigure(i, weight=1)
        self.button_frame.grid_columnconfigure(0, weight=1)

        self.preview_id = None
        self.hide_preview_id = None
        self.preview_window = None

    def open_project(self, path):
        try:
            subprocess.Popen(["python3", path])
        except Exception as e:
            messagebox.showerror("Error", f"Failed to open project: {e}")

    def update_description(self, event, text, image_path):
        self.description_label.config(text=text)
        if image_path:
            image = Image.open(image_path)
            image = image.resize((150, 150), Image.LANCZOS)  # Resize the image to fit the label
            image = ImageTk.PhotoImage(image)
            self.image_label.config(image=image)
            self.image_label.image = image  # Keep a reference to the image to avoid garbage collection
        else:
            self.image_label.config(image='')
            self.image_label.image = None

    def clear_description(self, event):
        self.description_label.config(text="")
        self.image_label.config(image='')
        self.image_label.image = None

    def schedule_preview(self, event, img_path):
        if self.preview_id is not None:
            self.after_cancel(self.preview_id)
        if self.hide_preview_id is not None:
            self.after_cancel(self.hide_preview_id)
        self.preview_id = self.after(500, lambda: self.show_preview(event, img_path))  # Delay of 500ms

    def show_preview(self, event, img_path):
        if self.preview_window is None or not self.preview_window.winfo_exists():
            self.preview_window = tk.Toplevel(self)
            self.preview_window.title("Preview")
            self.preview_window.configure(bg='#ADD8E6')
            self.preview_image_label = tk.Label(self.preview_window, bg='#ADD8E6')
            self.preview_image_label.pack(pady=10, padx=10, fill='both', expand=True)
        image = Image.open(img_path)
        image = image.resize((300, 300), Image.LANCZOS)  # Resize the preview image
        photo = ImageTk.PhotoImage(image)
        self.preview_image_label.config(image=photo)
        self.preview_image_label.image = photo  # Keep a reference to avoid garbage collection
        # Adjust the size of the preview window based on the resized image
        new_width, new_height = image.size
        self.preview_window.geometry(f"{new_width + 20}x{new_height + 60}")
        self.preview_window.geometry(f"+{event.widget.winfo_rootx() + 50}+{event.widget.winfo_rooty() + 50}")
        self.preview_window.deiconify()

    def schedule_hide_preview(self, event):
        if self.preview_id is not None:
            self.after_cancel(self.preview_id)
        self.hide_preview_id = self.after(200, self.hide_preview)  # Delay to hide the preview

    def hide_preview(self):
        if self.preview_window is not None and self.preview_window.winfo_exists():
            self.preview_window.withdraw()

# Create and run the application
app = ProjectLauncher()
app.mainloop()
